name: Deploy to AWS Development

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_IP: ${{ secrets.DEV_EC2_INSTANCE_IP }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pip install uv
        uv pip install --system -r requirements.txt
    
    - name: Run frontend tests (if available)
      working-directory: ./frontend
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test -- --watchAll=false --coverage=false
        else
          echo "No frontend tests found, skipping..."
        fi
    
    - name: Run backend tests (if available)
      working-directory: ./backend
      run: |
        if [ -d "tests" ]; then
          pytest tests/ -v
        else
          echo "No backend tests found, skipping..."
        fi
    
    - name: Skip linting for deployment
      run: |
        echo "Skipping linting checks for deployment workflow"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Development EC2
      uses: appleboy/ssh-action@v1.0.0
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'placeholder' }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'placeholder' }}
        HUGGINGFACE_API_TOKEN: ${{ secrets.HUGGINGFACE_API_TOKEN || 'placeholder' }}
        PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY || 'placeholder' }}
      with:
        host: ${{ env.EC2_INSTANCE_IP }}
        username: ec2-user
        key: ${{ secrets.DEV_EC2_SSH_PRIVATE_KEY }}
        timeout: 20m
        command_timeout: 15m
        envs: OPENAI_API_KEY,GEMINI_API_KEY,HUGGINGFACE_API_TOKEN,PERPLEXITY_API_KEY
        script: |
          echo "üöÄ Starting development deployment..."
          
          # Navigate to app directory
          cd /opt/app
          
          # Pull latest code
          echo "üì• Pulling latest code..."
          if [ -d "/opt/app/background-multimodal-llm" ]; then
            cd /opt/app/background-multimodal-llm
            git pull origin master || {
              echo "Failed to pull, trying to reset..."
              git reset --hard HEAD
              git pull origin master
            }
          else
            echo "App directory not found, cloning fresh..."
            cd /opt/app
            git clone https://github.com/${{ github.repository }}.git background-multimodal-llm
            sudo chown -R ec2-user:ec2-user background-multimodal-llm
            cd background-multimodal-llm
          fi
          
          # Update environment variables with any secrets
          echo "üîê Updating environment variables..."
          if [ ! -f .env ]; then
            echo "Creating default .env file..."
            
            cat > .env << 'EOF'
          NODE_ENV=development
          REACT_APP_API_URL=https://api.back-agent.com
          REACT_APP_WS_URL=wss://api.back-agent.com
          DATABASE_URL=sqlite:///app/dev_database.db
          SECRET_KEY=dev-secret-key-change-in-production
          CORS_ORIGINS=http://54.211.160.83:3000,http://54.211.160.83:8000,https://back-agent.com,https://api.back-agent.com
          EOF
          
            # Append secrets safely using environment variables passed from GitHub Actions
            echo "OPENAI_API_KEY=\"${OPENAI_API_KEY}\"" >> .env
            echo "GEMINI_API_KEY=\"${GEMINI_API_KEY}\"" >> .env
            echo "HUGGINGFACE_API_TOKEN=\"${HUGGINGFACE_API_TOKEN}\"" >> .env
            echo "PERPLEXITY_API_KEY=\"${PERPLEXITY_API_KEY}\"" >> .env
          fi
          
          # Copy .env to deployment directory for docker-compose
          echo "üìã Copying .env to deployment directory..."
          cp .env deployment/.env
          
          # Validate deployment .env
          if [ -f deployment/.env ]; then
            echo "‚úÖ deployment/.env copied successfully"
          else
            echo "‚ùå Failed to copy .env to deployment directory"
            exit 1
          fi
          
          # Stop existing containers
          echo "üõë Stopping existing containers..."
          docker-compose -f deployment/docker-compose.dev.yml down || echo "No containers to stop"
          
          # Setup MCP Perplexity Docker image (only if needed)
          echo "üîß Checking MCP Perplexity setup..."
          if ! docker images | grep -q "mcp/perplexity-ask"; then
            echo "üì¶ MCP Docker image not found, building..."
            
            # Check if source exists, clone if needed
            if [ ! -d "backend/MCP/mcp_server/modelcontextprotocol/perplexity-ask" ]; then
              echo "üì• Cloning Perplexity MCP server..."
              mkdir -p backend/MCP/mcp_server/
              cd backend/MCP/mcp_server/
              git clone https://github.com/ppl-ai/modelcontextprotocol.git
            fi
            
            # Build Docker image
            cd backend/MCP/mcp_server/modelcontextprotocol/perplexity-ask
            if [ -f "package.json" ]; then
              echo "üì¶ Installing npm dependencies..."
              npm install || echo "‚ö†Ô∏è  npm install failed, MCP features may not work"
              echo "üî® Building MCP Docker image..."
              docker build -t mcp/perplexity-ask:latest . || echo "‚ö†Ô∏è  MCP Docker build failed, Perplexity features disabled"
            fi
            cd /opt/app/background-multimodal-llm
          else
            echo "‚úÖ MCP Docker image already exists, skipping build"
          fi
          
          # Build and start new containers
          echo "üî® Building and starting containers..."
          docker-compose -f deployment/docker-compose.dev.yml up -d --build
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to start..."
          sleep 45
          
          # Health check with retry
          echo "üè• Running health check..."
          HEALTH_CHECK_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $HEALTH_CHECK_RETRIES ]; do
            if curl -f --max-time 10 http://localhost:8000/health > /dev/null 2>&1; then
              echo "‚úÖ Backend is healthy!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚è≥ Health check failed (attempt $RETRY_COUNT/$HEALTH_CHECK_RETRIES), waiting 15 seconds..."
              sleep 15
            fi
          done
          
          if [ $RETRY_COUNT -eq $HEALTH_CHECK_RETRIES ]; then
            echo "‚ùå Backend health check failed after $HEALTH_CHECK_RETRIES attempts, checking logs..."
            docker-compose -f deployment/docker-compose.dev.yml logs backend
            echo "üìä Container status:"
            docker-compose -f deployment/docker-compose.dev.yml ps
            exit 1
          fi
          
          # Check frontend with retry
          echo "üéØ Checking frontend..."
          FRONTEND_RETRIES=3
          FRONTEND_RETRY_COUNT=0
          
          while [ $FRONTEND_RETRY_COUNT -lt $FRONTEND_RETRIES ]; do
            if curl -f --max-time 10 http://localhost:3000 > /dev/null 2>&1; then
              echo "‚úÖ Frontend is running!"
              break
            else
              FRONTEND_RETRY_COUNT=$((FRONTEND_RETRY_COUNT + 1))
              echo "‚è≥ Frontend check failed (attempt $FRONTEND_RETRY_COUNT/$FRONTEND_RETRIES), waiting 10 seconds..."
              sleep 10
            fi
          done
          
          if [ $FRONTEND_RETRY_COUNT -eq $FRONTEND_RETRIES ]; then
            echo "‚ö†Ô∏è  Frontend health check failed after $FRONTEND_RETRIES attempts, checking logs..."
            docker-compose -f deployment/docker-compose.dev.yml logs frontend
            echo "‚ö†Ô∏è  Frontend might still be starting up - this is not critical for deployment success"
          fi
          
          # Cleanup old images
          echo "üßπ Cleaning up old Docker images..."
          docker image prune -f
          
          echo "üéâ Development deployment completed!"
          echo "üìä Container status:"
          docker-compose -f deployment/docker-compose.dev.yml ps
          
          echo ""
          echo "üîó Access URLs:"
          echo "   Frontend: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):3000"
          echo "   Backend:  http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8000"
          echo "   Health:   http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8000/health"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Development deployment successful!"
          echo "üîó Frontend: http://${{ env.EC2_INSTANCE_IP }}:3000"
          echo "üîó Backend: http://${{ env.EC2_INSTANCE_IP }}:8000"
        else
          echo "‚ùå Development deployment failed!"
          echo "Check the logs above for details."
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Tests failed - fix issues before deploying."
          fi
        fi 