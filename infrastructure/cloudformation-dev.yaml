AWSTemplateFormatVersion: '2010-09-09'
Description: 'Multimodal AI Assistant - Development Stack'

Parameters:
  ProjectName:
    Type: String
    Default: multimodal-ai-dev
    Description: Name of the project
  
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access

Resources:
  # Simple VPC setup
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group - More open for development
  DevSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for development server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: React dev server
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
          Description: FastAPI backend
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-dev-sg

  # Simple IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref S3Bucket

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # Simple S3 bucket for file storage
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-storage-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, POST, PUT, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # EC2 Instance - t3.micro for development (free tier eligible)
  DevServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0abcdef1234567890  # Amazon Linux 2023 (update for your region)
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref DevSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker git
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Start Docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Node.js for development
          curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
          yum install -y nodejs
          
          # Install Python 3.11 and pip
          yum install -y python3.11 python3.11-pip
          
          # Create application directory
          mkdir -p /opt/app
          chown ec2-user:ec2-user /opt/app
          
          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          
          # Create simple environment file
          cat > /opt/app/.env << 'EOF'
          NODE_ENV=development
          REACT_APP_API_URL=http://localhost:8000
          REACT_APP_WS_URL=ws://localhost:8000
          DATABASE_URL=sqlite:///app/dev_database.db
          OPENAI_API_KEY=placeholder
          GEMINI_API_KEY=placeholder
          HUGGINGFACE_API_TOKEN=placeholder
          SECRET_KEY=dev-secret-key-change-in-production
          CORS_ORIGINS=http://localhost:3000,http://localhost:8000
          EOF
          
          chown ec2-user:ec2-user /opt/app/.env
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-dev-server

  # Elastic IP for consistent access
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref DevServerInstance
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-dev-eip

Outputs:
  DevServerPublicIP:
    Description: Public IP address of the development server
    Value: !Ref ElasticIP
    Export:
      Name: !Sub ${AWS::StackName}-DevServer-PublicIP
  
  DevServerPrivateIP:
    Description: Private IP address of the development server
    Value: !GetAtt DevServerInstance.PrivateIp
    Export:
      Name: !Sub ${AWS::StackName}-DevServer-PrivateIP
  
  S3BucketName:
    Description: Name of the S3 bucket for file storage
    Value: !Ref S3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-S3-Bucket
  
  SSHCommand:
    Description: SSH command to connect to the development server
    Value: !Sub 'ssh -i ~/.ssh/${KeyPairName}.pem ec2-user@${ElasticIP}'
    Export:
      Name: !Sub ${AWS::StackName}-SSH-Command
  
  FrontendURL:
    Description: Frontend development URL
    Value: !Sub 'http://${ElasticIP}:3000'
    Export:
      Name: !Sub ${AWS::StackName}-Frontend-URL
  
  BackendURL:
    Description: Backend API URL
    Value: !Sub 'http://${ElasticIP}:8000'
    Export:
      Name: !Sub ${AWS::StackName}-Backend-URL 