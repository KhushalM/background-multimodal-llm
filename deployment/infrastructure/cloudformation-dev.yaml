AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simple AWS Development Environment for Multimodal AI Assistant'

Parameters:
  KeyPairName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Default: multimodal-ai-dev-key

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: multimodal-ai-dev-vpc

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: multimodal-ai-dev-igw

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: multimodal-ai-dev-public-subnet

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: multimodal-ai-dev-public-rt

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Public Subnet
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group
  DevSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for development server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: React dev server
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
          Description: FastAPI backend
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: multimodal-ai-dev-sg

  # EC2 Instance (no IAM role)
  DevServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c6ebb5b9bce4ba15
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref DevSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y docker git
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Start Docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Node.js
          curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
          yum install -y nodejs
          
          # Create application directory
          mkdir -p /opt/app
          chown ec2-user:ec2-user /opt/app
          
          # Create simple environment file
          cat > /opt/app/.env << 'EOF'
          NODE_ENV=development
          REACT_APP_API_URL=http://localhost:8000
          REACT_APP_WS_URL=ws://localhost:8000
          DATABASE_URL=sqlite:///app/dev_database.db
          OPENAI_API_KEY=placeholder
          GEMINI_API_KEY=placeholder
          HUGGINGFACE_API_TOKEN=placeholder
          SECRET_KEY=dev-secret-key
          CORS_ORIGINS=http://localhost:3000,http://localhost:8000
          EOF
          
          chown ec2-user:ec2-user /opt/app/.env
      Tags:
        - Key: Name
          Value: multimodal-ai-dev-server

  # Elastic IP
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref DevServerInstance
      Tags:
        - Key: Name
          Value: multimodal-ai-dev-eip

Outputs:
  DevServerPublicIP:
    Description: Public IP address of the development server
    Value: !Ref ElasticIP
  
  SSHCommand:
    Description: SSH command to connect to the development server
    Value: !Sub 'ssh -i ~/.ssh/${KeyPairName}.pem ec2-user@${ElasticIP}'
  
  FrontendURL:
    Description: Frontend development URL
    Value: !Sub 'http://${ElasticIP}:3000'
  
  BackendURL:
    Description: Backend API URL
    Value: !Sub 'http://${ElasticIP}:8000' 